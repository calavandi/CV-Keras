# -*- coding: utf-8 -*-
"""EVA-S1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R7LjkzlyonYjwZj6wNgr8fkmTOJNMSbx
"""

# import the necessary packages
import numpy as np
from urllib.request import urlopen
import cv2
from matplotlib import pyplot as plt

# METHOD #1: OpenCV, NumPy, and urllib
def url_to_image(url):
	# download the image, convert it to a NumPy array, and then read
	# it into OpenCV format
	resp = urlopen(url)
	image = np.asarray(bytearray(resp.read()), dtype="uint8")
	image = cv2.imdecode(image, cv2.IMREAD_COLOR)
 
	# return the image
	return image

"""Fetch an image from the web source"""

image = url_to_image("https://fontsarena-cd5e.kxcdn.com/wp-content/uploads/2019/04/helvetica-now-font-400x364.png")

"""Display the image"""

from google.colab.patches import cv2_imshow
cv2_imshow(image)

edges = cv2.Canny(image,100,200)

cv2_imshow(edges) #Display all the edges

"""Vertical edge detector. For a vertical edge detector, we're trying to check for difference in intensity the y-axis and filter or bring that difference out."""

#kernel = np.ones((3,3),np.float32)/25
kernel = np.float32([[-1,0,1],[-1,0,1],[-1,0,1]])
dst = cv2.filter2D(image,-1,kernel)
cv2_imshow(dst)

"""Similarly for horizontal edge detector. For a vertical edge detector, we're trying to check for difference in intensity thexy-axis and filter or bring that difference out."""

horiz_edge = np.float32([[1,1,1],[0,0,0],[-1,-1,-1]])
dst = cv2.filter2D(image,-1,horiz_edge)
cv2_imshow(dst)

"""For detecting the edges inclined at a 45 degree angle, we create a difference across the diagnol of a matrix or in other words, compare the intensity across the diagnol of the kernel and detect an edge."""

edge_45_kernel = np.float32([[0,1,1],[-1,0,1],[-1,-1,0]])  #Kernel to detect 45 degree inclinations
dst = cv2.filter2D(image,-1, edge_45_kernel)
cv2_imshow(dst)

"""To blur an image, we're trying to reduce the overall intensity or dumbdown the intensity across the image. For this, we use a matrix of all 1's. This is also knows an mean blur."""

blur_kernel = np.float32([[1,1,1],[1,1,1],[1,1,1]])/9 #blur kernel

dst = cv2.filter2D(image,-1,blur_kernel)
cv2_imshow(dst)

"""To Sharpen an image, we bring out a particular featre out and make it dominant, or blur out smaller pixels around it."""

sharpen_kernel = np.float32([[-1,-1,-1],[-1,9,-1],[-1,-1,-1]])  #Kernel that sharpens or brings out the feature or a pixel.

dst = cv2.filter2D(image,-1,sharpen_kernel)
cv2_imshow(dst)

"""Identity kernel is a kernel that preserves the image without bluring or modifying the image in any way. For this, none of the features should be distured or modified. So the image when convoluting should preserve the data as is."""

Id_kernel = np.float32([[0,0,0],[0,1,0],[0,0,0]])  #Identity kernel

dst = cv2.filter2D(image,-1,Id_kernel)
cv2_imshow(dst)